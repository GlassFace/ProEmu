From 8fb69eb5a4fd1ed1012b91217af821c3411783ec Mon Sep 17 00:00:00 2001
From: Edder <d.rosenauer@googlemail.com>
Date: Sun, 24 Oct 2010 21:55:37 +0200
Subject: [PATCH 2/2] xp rates

---
 src/game/CharacterHandler.cpp |    1 +
 src/game/GossipDef.cpp        |    4 +-
 src/game/Player.cpp           |   48 ++++++++++++++++++++++++++++++++++++----
 src/game/Player.h             |    5 ++++
 4 files changed, 51 insertions(+), 7 deletions(-)

diff --git a/src/game/CharacterHandler.cpp b/src/game/CharacterHandler.cpp
index 08bf61e..ca4bdb4 100644
--- a/src/game/CharacterHandler.cpp
+++ b/src/game/CharacterHandler.cpp
@@ -100,6 +100,7 @@ bool LoginQueryHolder::Initialize()
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADGLYPHS,          "SELECT spec, slot, glyph FROM character_glyphs WHERE guid='%u'", GUID_LOPART(m_guid));
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADMAILS,           "SELECT id,messageType,sender,receiver,subject,body,has_items,expire_time,deliver_time,money,cod,checked,stationery,mailTemplateId FROM mail WHERE receiver = '%u' ORDER BY id DESC", GUID_LOPART(m_guid));
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADMAILEDITEMS,     "SELECT data, text, mail_id, item_guid, item_template FROM mail_items JOIN item_instance ON item_guid = guid WHERE receiver = '%u'", GUID_LOPART(m_guid));
+    res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADXPRATE,          "SELECT UNIX_TIMESTAMP(start_time), UNIX_TIMESTAMP(end_time), kill_xp_rate, quest_xp_rate, explore_xp_rate FROM character_xp_rates WHERE guid = '%u'", GUID_LOPART(m_guid));
 
     return res;
 }
diff --git a/src/game/GossipDef.cpp b/src/game/GossipDef.cpp
index 06ac32a..3d59eed 100644
--- a/src/game/GossipDef.cpp
+++ b/src/game/GossipDef.cpp
@@ -525,7 +525,7 @@ void PlayerMenu::SendQuestGiverQuestDetails(Quest const *pQuest, ObjectGuid npcG
         else
             data << uint32(pQuest->GetRewOrReqMoney());
 
-        data << uint32(pQuest->XPValue(GetMenuSession()->GetPlayer()));
+	 data << uint32(GetMenuSession()->GetPlayer()->quest_xp_rate*pQuest->XPValue(GetMenuSession()->GetPlayer()));
     }
 
     // TODO: fixme. rewarded honor points
@@ -791,7 +791,7 @@ void PlayerMenu::SendQuestGiverOfferReward(Quest const* pQuest, ObjectGuid npcGU
         data << uint32(pQuest->GetRewOrReqMoney());
 
     // xp
-    data << uint32(pQuest->XPValue(GetMenuSession()->GetPlayer()));
+    data << uint32(GetMenuSession()->GetPlayer()->quest_xp_rate*pQuest->XPValue(GetMenuSession()->GetPlayer()));
 
     // TODO: fixme. rewarded honor points. Multiply with 10 to satisfy client
     data << uint32(10*MaNGOS::Honor::hk_honor_at_level(GetMenuSession()->GetPlayer()->getLevel(), pQuest->GetRewHonorAddition()));
diff --git a/src/game/Player.cpp b/src/game/Player.cpp
index 85cea3d..35d0030 100644
--- a/src/game/Player.cpp
+++ b/src/game/Player.cpp
@@ -851,6 +851,9 @@ bool Player::Create( uint32 guidlow, const std::string& name, uint8 race, uint8
     }
     // all item positions resolved
 
+	// insert player into character_xp_rates with default values
+	CharacterDatabase.PExecute("INSERT INTO character_xp_rates (guid) VALUES ('%u')", guidlow);
+
     return true;
 }
 
@@ -4328,6 +4331,7 @@ void Player::DeleteFromDB(ObjectGuid playerguid, uint32 accountId, bool updateRe
             CharacterDatabase.PExecute("DELETE FROM character_equipmentsets WHERE guid = '%u'", lowguid);
             CharacterDatabase.PExecute("DELETE FROM guild_eventlog WHERE PlayerGuid1 = '%u' OR PlayerGuid2 = '%u'", lowguid, lowguid);
             CharacterDatabase.PExecute("DELETE FROM guild_bank_eventlog WHERE PlayerGuid = '%u'", lowguid);
+	     CharacterDatabase.PExecute("DELETE FROM character_xp_rates WHERE guid = '%u'", lowguid);
             CharacterDatabase.CommitTransaction();
             break;
         }
@@ -6204,8 +6208,8 @@ void Player::CheckAreaExploreAndOutdoor()
                     XP = uint32(sObjectMgr.GetBaseXP(p->area_level)*sWorld.getConfig(CONFIG_FLOAT_RATE_XP_EXPLORE));
                 }
 
-                GiveXP( XP, NULL );
-                SendExplorationExperience(area,XP);
+                GiveXP( explore_xp_rate*XP, NULL );
+                SendExplorationExperience(area,explore_xp_rate*XP);
             }
             DETAIL_LOG("PLAYER: Player %u discovered a new area: %u", GetGUIDLow(), area);
         }
@@ -13646,7 +13650,7 @@ void Player::RewardQuest(Quest const *pQuest, uint32 reward, Object* questGiver,
     uint32 XP = q_status.m_rewarded ? 0 : uint32(pQuest->XPValue(this)*sWorld.getConfig(CONFIG_FLOAT_RATE_XP_QUEST));
 
     if (getLevel() < sWorld.getConfig(CONFIG_UINT32_MAX_PLAYER_LEVEL))
-        GiveXP(XP , NULL);
+        GiveXP( quest_xp_rate*XP , NULL );
     else
     {
         uint32 money = uint32(pQuest->GetRewMoneyMaxLevel() * sWorld.getConfig(CONFIG_FLOAT_RATE_DROP_MONEY));
@@ -13703,7 +13707,7 @@ void Player::RewardQuest(Quest const *pQuest, uint32 reward, Object* questGiver,
         q_status.uState = QUEST_CHANGED;
 
     if (announce)
-        SendQuestReward(pQuest, XP, questGiver);
+        SendQuestReward( pQuest, quest_xp_rate*XP, questGiver );
 
     // cast spells after mark quest complete (some spells have quest completed state reqyurements in spell_area data)
     if (pQuest->GetRewSpellCast() > 0)
@@ -15556,6 +15560,40 @@ bool Player::LoadFromDB( uint32 guid, SqlQueryHolder *holder )
     DEBUG_FILTER_LOG(LOG_FILTER_PLAYER_STATS, "The value of player %s after load item and aura is: ", m_name.c_str());
     outDebugStatsValues();
 
+	result = holder->GetResult(PLAYER_LOGIN_QUERY_LOADXPRATE);
+	
+	if(!result)
+	{
+		sLog.outError("Player (GUID %u) not found in table `character_xp_rates`, will use default values",guid);
+		kill_xp_rate = 1;
+		quest_xp_rate = 1;
+		explore_xp_rate = 1;
+	} else {
+		fields = result->Fetch();
+
+		uint64 starttime    = fields[0].GetUInt64();
+               time_t start_time   = time_t(starttime);
+               uint64 endtime      = fields[1].GetUInt64();
+               time_t end_time		= time_t(endtime);
+		kill_xp_rate		= fields[2].GetUInt32();
+		quest_xp_rate		= fields[3].GetUInt32();
+		explore_xp_rate		= fields[4].GetUInt32();
+
+		time_t currenttime = time(NULL);
+		if( start_time < currenttime && currenttime < end_time ) 
+		{
+			// bonus is legal, player gets db values even if they are 1 1 1 !
+			kill_xp_rate		= fields[2].GetUInt32();
+			quest_xp_rate		= fields[3].GetUInt32();
+			explore_xp_rate		= fields[4].GetUInt32();
+		} else {
+			// bonus is illegal, player gets default values
+			kill_xp_rate = 1;
+			quest_xp_rate = 1;
+			explore_xp_rate = 1;
+		} 
+	}
+
     // all fields read
     delete result;
 
@@ -20354,7 +20392,7 @@ void Player::RewardSinglePlayerAtKill(Unit* pVictim)
     if(!PvP)
     {
         RewardReputation(pVictim,1);
-        GiveXP(xp, pVictim);
+        GiveXP(kill_xp_rate*xp, pVictim);
 
         if(Pet* pet = GetPet())
             pet->GivePetXP(xp);
diff --git a/src/game/Player.h b/src/game/Player.h
index 7d705b6..17e449d 100644
--- a/src/game/Player.h
+++ b/src/game/Player.h
@@ -914,6 +914,7 @@ enum PlayerLoginQueryIndex
     PLAYER_LOGIN_QUERY_LOADMAILEDITEMS,
     PLAYER_LOGIN_QUERY_LOADTALENTS,
     PLAYER_LOGIN_QUERY_LOADWEEKLYQUESTSTATUS,
+    PLAYER_LOGIN_QUERY_LOADXPRATE,
 
     MAX_PLAYER_LOGIN_QUERY
 };
@@ -2317,6 +2318,10 @@ class MANGOS_DLL_SPEC Player : public Unit
         void SendCinematicStart(uint32 CinematicSequenceId);
         void SendMovieStart(uint32 MovieId);
 
+	 uint32 kill_xp_rate;
+	 uint32 quest_xp_rate;
+	 uint32 explore_xp_rate;
+
         /*********************************************************/
         /***                 INSTANCE SYSTEM                   ***/
         /*********************************************************/
-- 
1.7.3.1.msysgit.0

